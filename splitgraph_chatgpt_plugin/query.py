# from: https://python.langchain.com/en/latest/modules/chains/examples/sqlite.html
from typing import List, Tuple
from langchain.vectorstores import VectorStore
from .markdown import (
    ddn_response_to_markdown,
    get_repository_urls_as_markdown,
    get_query_editor_url,
)

from .gpt import generate_gpt_prompt, get_generated_sql_with_explanation

from .persistence import find_repos

from .ddn import DDNResponse, ddn_query

RESPONSE_TEMPLATE = """
Query:
"{question}"

Based on your question, the following SQL query was generated by GPT to query the Splitgraph DDN:
```sql
{sql}
```

To better understand how the SQL query was constructed, consider the following explanation:
{explanation}

Query results:
{query_response}

[Edit and fine-tune this query on Splitgraph]({query_editor_url})

For more data related to your question, you may want to browse related repositories on Splitgraph:
{repository_page_urls}

""".strip()


def generate_response_text(
    question: str,
    sql: str,
    explanation: str,
    query_response: DDNResponse,
    repositories: List[Tuple[str, str]],
) -> str:
    return RESPONSE_TEMPLATE.format(
        question=question,
        sql=sql,
        explanation=explanation,
        query_response=ddn_response_to_markdown(query_response),
        repository_page_urls="\n".join(get_repository_urls_as_markdown(repositories)),
        query_editor_url=get_query_editor_url(sql),
    )


def generate_full_response(question:str, openai_api_key:str, vstore: VectorStore)->str:
    repositories = find_repos(vstore, question)
    prompt = generate_gpt_prompt(repositories, question)
    sql, explanation = get_generated_sql_with_explanation(openai_api_key, prompt)
    ddn_response = ddn_query(sql)
    return generate_response_text(question, sql, explanation, ddn_response, repositories)
